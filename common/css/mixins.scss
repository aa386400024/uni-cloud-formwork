/* mixins.scss 定义混入，用于复用样式片段 */
/**
 * 当前页的方法和utilities.scss里的内容会给人感觉有所重复，但适用于不同场景。
 * utilities.scss中的类提供快捷方式应用布局，可直接在HTML中使用。
 * mixins.scss的mixin则更灵活，可以处理更复杂的布局情况。
 * 简单布局可用.utilities.scss的类，复杂布局可用mixins.scss，两者结合使用合理且互补。
 * 但为防混淆，使用时要保持一致，或在代码中注释为何在此处用类，哪处用mixin。 
 */
// flex布局的 mixin
@mixin flex-layout($type: center, $direction: row) {
	$layouts: (
		'start': (
			justify-content: flex-start,
			align-items: flex-start
		),
		'end': (
			justify-content: flex-end,
			align-items: flex-end
		),
		'center': (
			justify-content: center,
			align-items: center
		),
		'between': (
			justify-content: space-between,
			align-items: center
		),
		'around': (
			justify-content: space-around,
			align-items: center
		),
		// 在这里添加更多的布局类型...
	);

	display: flex;
	flex-direction: $direction; // 使用参数

	$layout: map-get($layouts, $type);
	@if $layout {
		@each $property, $value in $layout {
			#{$property}: $value;
		}
	} @else {
		@warn "未知的布局类型: `#{$type}`.";
	}
}


// 清除浮动的 mixin
@mixin clearfix($pseudo: 'after') {
	@if $pseudo == 'both' {
		&::before,
		&::after {
			content: '';
			display: table;
			clear: both;
		}
	} @else {
		&::#{$pseudo} {
			content: '';
			display: table;
			clear: both;
		}
	}
}
// 文本溢出显示省略号的 mixin
@mixin ellipsis($lines: 1) {
	overflow: hidden;
	text-overflow: ellipsis;
	@if $lines == 1 {
		white-space: nowrap;
	} @else {
		display: -webkit-box;
		-webkit-box-orient: vertical;
		-webkit-line-clamp: $lines;
	}
}

// position定位的 mixin
@mixin position($type: relative, $top: auto, $right: auto, $bottom: auto, $left: auto, $z-index: auto, $transform: none) {
	position: $type;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
	z-index: $z-index;
	transform: $transform;
}

// 流式布局的 mixin
@mixin fluid-grid($property, $min-value, $max-value, $min-viewport: 320px, $max-viewport: 1200px) {
	#{$property}: $min-value;
	@media screen and (min-width: $min-viewport) and (max-width: $max-viewport) {
		#{$property}: calc(#{$min-value} + (#{$max-value} - #{$min-value}) * ((100vw - #{$min-viewport}) / (#{$max-viewport} - #{$min-viewport})));
	}
	@media screen and (min-width: $max-viewport) {
		#{$property}: $max-value;
	}
}
// 嵌套图片自适应 mixin
@mixin aspect-ratio($width, $height) {
	position: relative;
	&:before {
		content: '';
		display: block;
		width: 100%;
		padding-top: ($height / $width) * 100%;
	}
	& > img,
	& > video,
	& > iframe {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
	}
}
// 生成简单的渐变背景 mixin
@mixin gradient-bg($start-color, $end-color) {
	background: $start-color;
	background: linear-gradient(to right, $start-color, $end-color);
}

// 生成2倍视网膜显示屏图片背景 mixin
@mixin retina-bg($filename, $extension, $width, $height) {
	background-image: url('#{$filename}.#{$extension}');
	@media (min--moz-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 2/1), (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx) {
		background-image: url('#{$filename}@2x.#{$extension}');
		background-size: $width $height;
	}
}
// 生成多列布局 mixin
@mixin columns($column-count: 2, $column-gap: 1em) {
	-webkit-column-count: $column-count;
	-moz-column-count: $column-count;
	column-count: $column-count;
	-webkit-column-gap: $column-gap;
	-moz-column-gap: $column-gap;
	column-gap: $column-gap;
}

// CSS Grid布局的快捷方式 mixin
@mixin grid($rows, $columns, $gap: 1em) {
	display: grid;
	grid-template-rows: repeat($rows, 1fr);
	grid-template-columns: repeat($columns, 1fr);
	grid-gap: $gap;
}

// 定义字体包 mixin
@mixin font-face($font-family, $file-path, $weight: normal, $style: normal) {
	@font-face {
		font-family: $font-family;
		src: url('#{$file-path}.woff2') format('woff2'), url('#{$file-path}.woff') format('woff');
		font-weight: $weight;
		font-style: $style;
	}
}

// 标题文字装饰
// 标题文字装饰
@mixin title-decoration($decoration: dot, $line-width: 40rpx,  $line-height: 4rpx) {
  position: relative;
  padding: 0 20rpx; // 根据需求调整间距

  &::before,
  &::after {
    content: '';
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
  }

  // 圆点装饰
  @if $decoration == dot {
    &::before,
    &::after {
      width: 10rpx; // 圆点大小
      height: 10rpx; // 圆点大小
      border-radius: 50%;
      background-color: #666; // 圆点颜色
    }

    &::before {
      left: 0;
      transform: translate(-100%, -50%);
    }

    &::after {
      right: 0;
      transform: translate(100%, -50%);
    }
  }

  // 横线装饰
  @else if $decoration == line {
    &::before,
    &::after {
      width: $line-width; // 使用参数指定横线宽度
      height: $line-height; // 横线高度
      background-color: #ccc; // 横线颜色
    }

    &::before {
      left: 0;
      transform: translateX(-100%);
    }

    &::after {
      right: 0;
      transform: translateX(100%);
    }
  }
}

